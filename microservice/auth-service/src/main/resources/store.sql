-- REGISTER USER
CREATE OR REPLACE PROCEDURE AUTH_SERVICE.REGISTER_USER (
	OUT O_RES_CODE INT,
	OUT O_RES_ID UUID,
	IN I_EMAIL VARCHAR,
	IN I_PASSWORD VARCHAR,
	IN I_ROLE VARCHAR DEFAULT 'USER',
	IN I_IS_VERIFIED BOOLEAN DEFAULT FALSE
) LANGUAGE PLPGSQL AS $$
BEGIN
	O_RES_CODE:=1;
	O_RES_ID:=NULL;

	 IF I_EMAIL IS NULL THEN
        O_RES_CODE := 100102;
        RETURN;
    END IF;

    IF I_PASSWORD IS NULL THEN
        O_RES_CODE := 100103;
        RETURN;
    END IF;
	
	IF EXISTS (SELECT 1 FROM AUTH_SERVICE.USERS WHERE EMAIL = I_EMAIL) THEN
		O_RES_CODE :=102102;
		RETURN;
	END IF;
	INSERT INTO AUTH_SERVICE.USERS(EMAIL, PASSWORD, ROLE, IS_VERIFIED)
	VALUES(I_EMAIL, I_PASSWORD, I_ROLE, I_IS_VERIFIED)
	RETURNING ID INTO O_RES_ID;
END;
$$;

CALL AUTH_SERVICE.REGISTER_USER (
	NULL, -- OUT parameter: O_RES_CODE (ignored in CALL)
	NULL, -- OUT parameter: O_RES_ID (ignored in CALL)
	'user1@example.com',
	'secure1234'
);

CREATE OR REPLACE PROCEDURE AUTH_SERVICE.DELETE_USER (
	OUT O_RES_CODE INT,
	OUT O_RES_ID UUID,
	IN I_ID UUID
) LANGUAGE PLPGSQL AS $$
	BEGIN
	O_RES_CODE:=1;
	O_RES_ID:=NULL;
	IF NOT EXISTS (SELECT 1 FROM AUTH_SERVICE.USERS U WHERE U.ID = I_ID) THEN
		O_RES_CODE :=100101;
		RETURN;
	END IF;
	 IF O_RES_CODE = 1 THEN
        DELETE FROM AUTH_SERVICE.USERS
        WHERE ID = I_ID
        RETURNING ID INTO O_RES_ID;
        -- Double check if deletion was successful
        IF O_RES_ID IS NULL THEN
            O_RES_CODE = 104101; -- Error code for deletion failed
        END IF;
    END IF;
	END;
$$

CALL AUTH_SERVICE.DELETE_USER(NULL,NULL,'12d66c8b-7a3e-4a77-9adc-cf15eefa74bc');
-- GET USER BY ID
CREATE OR REPLACE FUNCTION AUTH_SERVICE.GET_USER_BY_ID (IN I_ID UUID) RETURNS TABLE (
	ID UUID,
	EMAIL VARCHAR(255),
	PASSWORD VARCHAR(255),
	ROLE VARCHAR(50),
	IS_VERIFIED BOOLEAN,
	UPDATED_AT TIMESTAMP WITH TIME ZONE, -- Automatically sets the update timestamp
	CREATED_AT TIMESTAMP WITH TIME ZONE -- Automatically sets the creation timestamp
) LANGUAGE PLPGSQL AS $$
BEGIN
    RETURN QUERY
	SELECT * 
	FROM AUTH_SERVICE.USERS U
	WHERE U.ID = I_ID;
END;
$$;

-- GET USER BY EMAIL
CREATE OR REPLACE FUNCTION AUTH_SERVICE.GET_USER_BY_EMAIL (IN I_EMAIL VARCHAR(255)) RETURNS TABLE (
	ID UUID,
	EMAIL VARCHAR(255),
	PASSWORD VARCHAR(255),
	ROLE VARCHAR(50),
	IS_VERIFIED BOOLEAN,
	UPDATED_AT TIMESTAMP WITH TIME ZONE, -- Automatically sets the update timestamp
	CREATED_AT TIMESTAMP WITH TIME ZONE -- Automatically sets the creation timestamp
) LANGUAGE PLPGSQL AS $$
BEGIN
    RETURN QUERY
	SELECT * 
	FROM AUTH_SERVICE.USERS U
	WHERE U.EMAIL = I_EMAIL;
END;
$$;

SELECT
	*
FROM
	AUTH_SERVICE.GET_USER_BY_ID ('12d66c8b-7a3e-4a77-9adc-cf15eefa74bc');

-- GET USER LOGIN
CREATE OR REPLACE FUNCTION AUTH_SERVICE.GET_USER_LOGIN (IN I_EMAIL VARCHAR, IN I_PASSWORD VARCHAR) RETURNS TABLE (
	ID UUID,
	EMAIL VARCHAR(255),
	PASSWORD VARCHAR(255),
	ROLE VARCHAR(50),
	IS_VERIFIED BOOLEAN,
	UPDATED_AT TIMESTAMP WITH TIME ZONE, -- Automatically sets the update timestamp
	CREATED_AT TIMESTAMP WITH TIME ZONE -- Automatically sets the creation timestamp
) LANGUAGE PLPGSQL AS $$
BEGIN
    RETURN QUERY
	SELECT * 
	FROM AUTH_SERVICE.USERS U
	WHERE U.EMAIL = I_EMAIL AND U.PASSWORD = I_PASSWORD;
END;
$$;

SELECT
	*
FROM
	AUTH_SERVICE.GET_USER_LOGIN ('user1@example.com', 'secure1234');

-- UPDATE USER
CREATE OR REPLACE PROCEDURE AUTH_SERVICE.UPDATE_USER (
	OUT O_RES_CODE INT,
	OUT O_ID UUID,
	IN I_ID UUID,
	IN I_EMAIL VARCHAR DEFAULT NULL,
	IN I_PASSWORD VARCHAR DEFAULT NULL,
	IN I_ROLE VARCHAR DEFAULT NULL,
	IN I_IS_VERIFIED BOOLEAN DEFAULT NULL
) LANGUAGE PLPGSQL AS $$
DECLARE
	EMAIL_EXISTS BOOLEAN;
BEGIN 
	O_RES_CODE = 1;
    O_ID = NULL;
	
	 IF NOT EXISTS (SELECT 1 FROM FUMS.USERS WHERE ID = I_ID) THEN
	 O_RES_CODE = 101101;
	 RETURN;
	 END IF;
	 
	 IF I_EMAIL IS NOT NULL THEN 
		SELECT EXISTS(SELECT 1 FROM FUMS.USERS WHERE EMAIL = I_EMAIL AND ID != I_ID) INTO EMAIL_EXISTS;
	    IF EMAIL_EXISTS THEN
	        O_RES_CODE = 102102; -- Error code for duplicate email
	        RETURN; -- Exit early
	    END IF;
	END IF;
	
	IF O_RES_CODE = 1 THEN
		UPDATE AUTH_SERVICE.USERS
        SET
            EMAIL = COALESCE(I_EMAIL, EMAIL),
            PASSWORD = COALESCE(I_PASSWORD, PASSWORD),
            IS_VERIFIED = COALESCE(I_IS_VERIFIED, IS_VERIFIED),
            ROLE = COALESCE(I_ROLE, ROLE)
        WHERE ID = I_ID
        RETURNING ID INTO O_ID;
	END IF;
END;
$$;

CALL AUTH_SERVICE.UPDATE_USER (
	NULL, -- OUT parameter: O_RES_CODE (ignored in CALL)
	NULL, -- OUT parameter: O_RES_ID (ignored in CALL)
	'9078599b-e96d-4ad2-9e3e-c1c747ad4f52',
	NULL,
	NULL,
	NULL,
	TRUE
);